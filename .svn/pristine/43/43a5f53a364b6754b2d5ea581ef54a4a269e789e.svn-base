angular.module('admin.service').service('TaskSearchService', ['$q', '$http', '$log', 'AdminGuiConstants', 
                              function ($q, $http,$log, AdminGuiConstants) {
	
    'use strict';

            
    var contextRoot = "";
 
    // running E2E test from Eclipe
    if (AdminGuiConstants.END_TO_END_REST_CALL) {
        contextRoot = '/canopigui/';
    }
    else { // running from NetBeans
        contextRoot = '/gui-canopi-js/src/';
    }

    var baseUrl = contextRoot + 'app/admin-app/mock/tasks/';  
	
    /* Gets the the tasktypes
     *
     * @param taskType
     * @param options Optional parameters to configure the request
     * @returns {*} Promise
     */
    this.getTaskType = function (taskType, options) {
        var deferred = $q.defer();
        $http.get(baseUrl + taskType + '.json').success(function (response) {
            deferred.resolve(response);
        });

        return deferred.promise;
    };


    this.getSearchResults = function () {

        var deferred = $q.defer();
        $http.get(baseUrl + 'results.json').success(function (response) {
             deferred.resolve(response);
        });

        return deferred.promise; 
    };

    this.getTasks = function (workorderType) {

        if (!workorderType) workorderType = '';

        var deferred = $q.defer();
        $http.get(baseUrl + workorderType + 'tasklist.json').success(function (response) {
             deferred.resolve(response);
        });

        return deferred.promise; 
    };   

    this.getAllTasks = function () {

        var deferred = $q.defer();
        $http.get(baseUrl  + 'tasklist.json').success(function (response) {
             deferred.resolve(response);
        });

        return deferred.promise; 
    };   
    
    
    this.getSubTasks = function (workorderType) {

        if (!workorderType) workorderType = '';

        var deferred = $q.defer();
        $http.get(baseUrl + workorderType + 'subtasklist.json').success(function (response) {
             deferred.resolve(response);
        });

        return deferred.promise; 
    };   
    

}]);