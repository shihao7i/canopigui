'use strict';
 
describe('Testing ProjectOrderSearchController', function(){
    
    var scope, _httpBackend, _OrderSearchJsonService, _CommonUtilJsonService, ctrl, $timeout;
    var orderSearchMock;
 
    //mock Application to allow us to inject our own dependencies
    beforeEach(module('canopi.app'));
    beforeEach(module('canopi.service'));

        //load the mock module thus overriding the $state service
    beforeEach(module('stateMock'));
    beforeEach(function(){
        //orderSearchMock = jasmine.createSpyObj('OrderSearchJsonService', ['getProjectOrderSummary']);
        orderSearchMock = {};
        module('canopi.app', function($provide) {
            $provide.value('OrderSearchJsonService', orderSearchMock);
        });
        inject(function($q) {
            orderSearchMock.data = {
                returnStatus: 'Success',
                returnCode: null,
                returnMessage: 'SUCCESS',
                pageInfo: {
                        totalRecords: '64764',
                        currentPage: '0',
                        itemsPerPage: '100'
                },
                serviceOrderList:[
                    {
                        techOrderIndicator:'false',
                        attUserId:null,
                        projectOrderId:'7212',                    
                        projectOrderType: 'CNL',
                        bpelProcessId: null,
                        orderActivity: null,
                        orderRegion: null,
                        domainIndicator: null,
                        projectDueDate: '2009-12-31 00:00:00.0',
                        desiredDueDate: null,
                        projectCustomerName: null,
                        projectCCNA: null,
                        projectBAN: null,
                        projectACNA: null,
                        projectServiceId: null,
                        projectExternalOrderId: 'ooo',
                        projectOrderAction: 'New',
                        projectDecompositionMode: null,
                        projectOrderVersion: '5212',
                        projectOrderPass: null,
                        projectOrderStatus: 'InProgress',
                        projectCurrentStep: null,
                        projectLastUpdated: null,
                        projectCreatedOn: '2009-12-08 16:04:15.367',
                        projectCreatedBy: null,
                        projectLastUpdatedBy: null,
                        projectCustomerCode: null,
                        projectCustomerCKTID: null,
                        projectCustomerSVID: null,
                        projectPon: null,
                        projectUSO: null,
                        projectCommittedDueDate: null,
                        projectProductType: null,
                        projectSuppNo: null,
                        sourceSystem: null,
                        techOrderId: null,
                        techVersion: null,
                        techProvisioningStatus: null,
                        techProvisioningStatusDateFrom: null,
                        techScOrderId: null,
                        techTirksClo: null,
                        optId: null,
                        reserveProject: null,
                        diversityIndicator: null,
                        techRubyTicketNbr: null,
                        techRubyErrorMsg: null,
                        techParentOrderType: null,
                        techSuppNo: null,
                        techProjectOriginalSuppNo: null,
                        techOrderPonrFlag: false,
                        flowIndicator: null,
                        ortIndicator: false,
                        ponrFlag: false,
                        rtpIndicator: null,
                        moveOrderType: null,
                        changeOrderType: null,
                        createdInRelease: null,
                        pivotOrderAction: null,
                        asrItemId: null,
                        rollbackStatus: null,
                        rollbackMessage: null,
                        supportCancel: false,
                        supportSupp: false,
                        supportGenerateTechOrder: false,
                        supportRollback: false,
                        supportEvcRegress: false,
                        requestingRollback: false,
                        serviceType: 'CNL Facility',
                        complexMacdIndicator: null,
                        bulkMoveIndicator: null,
                        bulkMoveId: null,
                        customerCircuitReference: null,
                        tirksCacCode: null,
                        uVerseBan: null,
                        graniteWOID: null
                    }
                ],
                tableRows: {
    		rowMetaData: {
    			columnList: [
    				{
    					id: "projectOrderId",
    					displayName: "Project Order ID",
    					hyperlink: true
    				},
    				{
    					id: "suppNo",
    					displayName: "Supp No",
    					hyperlink: false
    				},
    				{
    					id: "externalOrderId",
    					displayName: "external Order ID",
    					hyperlink: false
    				},
    				{
    					id: "serviceId",
    					displayName: "Service ID",
    					hyperlink: false
    				},
    				{
    					id: "orderType",
    					displayName: "Order Type",
    					hyperlink: false
    				},
    				{
    					id: "orderAction",
    					displayName: "Order Action",
    					hyperlink: false
    				},
    				{
    					id: "creationDate",
    					displayName: "Creation Date",
    					hyperlink: false
    				},
    				{
    					id: "createdBy",
    					displayName: "Created By",
    					hyperlink: false
    				},
    				{
    					id: "dueDate",
    					displayName: "Due Date",
    					hyperlink: false
    				},
    				{
    					id: "orderStatus",
    					displayName: "Order Status",
    					hyperlink: false
    				},
    				{
    					id: "customerCode",
    					displayName: "Customer Code",
    					hyperlink: false
    				},
    				{
    					id: "customerName",
    					displayName: "Customer Name",
    					hyperlink: false
    				},
    				{
    					id: "ckr",
    					displayName: "CKR",
    					hyperlink: false
    				},
    				{
    					id: "svId",
    					displayName: "SVID",
    					hyperlink: false
    				},
    				{
    					id: "ban",
    					displayName: "BAN",
    					hyperlink: false
    				},
    				{
    					id: "acna",
    					displayName: "ACNA",
    					hyperlink: false
    				},
    				{
    					id: "uverseBan",
    					displayName: "U-Verse BAN",
    					hyperlink: false
    				},
    				{
    					id: "rtpIndicator",
    					displayName: "RTP Indicator",
    					hyperlink: false
    				}
    			]
    		},
                    rowValueList:[
                        {
                            cellValues: [
                                "7212",
                                null,
                                "ooo",
                                null,
                                "CNL",
                                "New",
                                "2009-12-08 16:04:15.367",
                                null,
                                "2009-12-31 00:00:00.0",
                                "InProgress",
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null
                            ]
                        }
                    ]
                }
            };
            orderSearchMock.getProjectOrderSummary = function(){
                var defer = $q.defer();
                defer.resolve(this.data);
                return defer.promise;
            };
        });
    });
    //mock the controller for the same reason and include $rootScope and $controller
    beforeEach(inject(function($rootScope, $controller, $httpBackend, $q, _$timeout_, _OrderSearchJsonService_){

        //create an empty scope
        scope = $rootScope.$new();
        _httpBackend = $httpBackend;
        _OrderSearchJsonService = _OrderSearchJsonService_;
        //Jasmine spec runner was returning ‘Error: Unexpected request: GET ... No more request expected.’ 
        // Stub out the rest calls made in canopi.app module's run block
        _httpBackend.expectGET('/canopigui/rest/common/user/get/pb154j').respond([]);
        _httpBackend.expectGET('/canopigui/rest/common/picklists/get').respond({
            poOrderTypeList:[{name:'UNI'}, {name: 'EVC'}, {name:'INL'}],
            poOrderActionList: [{name:'New'}, {name:'Update'}],
            poOrderStatusList:[{name:'Test1'}, {name:'Update'}],    
            decompModeList:[{name:'Test1'}, {name:'Update'}], 
            poRTPIndicatorList:[{name:'Test1'}, {name:'Update'}], 
            poComplexMACDList:[{name:'Test1'}, {name:'Update'}]
        });
        
        // set up the returns for our orderSearchMock
        // $q.when('weee') creates a resolved promise to "weee".
        // this is important since our service is async and returns
        // a promise.
        //orderSearchMock.getProjectOrderSummary.andReturn($q.when('weee'));

        // assign $timeout to a scoped variable so we can use 
        // $timeout.flush() later. Notice the _underscore_ trick
        // so we can keep our names clean in the tests.
        $timeout = _$timeout_;
      
        //declare the controller and inject our empty scope
        $controller('ProjectOrderSearchController', {
            $scope: scope,
            _OrderSearchJsonService:_OrderSearchJsonService
        });
        scope.$digest();
    }));
    
    // tests start here

    it('should have the correct initial state', inject(function ($rootScope){
   
        //$rootScope.$digest();
        
        console.log(scope.name);
 
        expect(scope.name).toEqual('ProjectOrderSearch');
        expect(scope.isLoading).toEqual(false);
        expect(scope.picklistNotReady).toEqual(true);
        expect(scope.displayDataTables).toEqual(false);
        //Date Picker
        expect(scope.datepickers.dueStartDateDatepicker).toEqual(false);
        expect(scope.datepickers.dueEndDateDatepicker).toEqual(false);
        expect(scope.datepickers.dueEndDateDatepicker).toEqual(false);
        expect(scope.datepickers.createdEndDateDatepicker).toEqual(false);
        expect(scope.datepickers.lastUpdatedStartDateDatepicker).toEqual(false);
        expect(scope.datepickers.lastUpdatedEndDateDatepicker).toEqual(false);
        expect(scope.dateOptions.formatYear).toMatch('yy');
        expect(scope.dateOptions.startingDay).toBe(1);
        expect(scope.dateOptions.showWeeks).toMatch("false");
        expect(scope.formats.length).toBe(4);
        expect(scope.formats).toContain('dd-MMMM-yyyy');
        expect(scope.formats).toContain('yyyy/MM/dd');
        expect(scope.formats).toContain('dd.MM.yyyy');
        expect(scope.formats).toContain('shortDate');
        expect(scope.format).toMatch(scope.formats[3]);
        //Angular UI Pagination Setup
        expect(scope.maxSize).toBe(5);
        expect(scope.transclude.bigCurrentPage).toBe(0);
        expect(scope.enablePagination).toEqual(false);
        //Table Records
        expect(scope.tableData.loadTrigger).toBe(0);
        expect(scope.tableData.tableDefinition).toEqual({});
        expect(scope.tableRecords).toBe(0);
        //Accordion
        expect(scope.accordionOpen.search).toEqual(true);
        expect(scope.accordionOpen.table).toEqual(false);
    }));
    
    it('should set datepickers to empty first', inject(function($rootScope){
        
        //$rootScope.$digest();
        
        expect(scope.poSearch.dueStartDate).toEqual('');
        expect(scope.poSearch.dueEndDate).toEqual('');
        expect(scope.poSearch.createdStartDate).toEqual('');
        expect(scope.poSearch.createdEndDate).toEqual('');
        expect(scope.poSearch.lastUpdatedStartDate).toEqual('');
        expect(scope.poSearch.lastUpdatedEndDate).toEqual('');
    }));
    
    it('should clear all search fields initally', inject(function($rootScope){
        //$rootScope.$digest();
        expect(scope.poSearch.projectOrderId).toBeUndefined();
        //scope.clearPOSearchScopeVariables();
        //expect(scope.poSearch.projectOrderId).toEqual('');        
    }));
    
    it('should run grid event handler', inject(function($rootScope){
        //$rootScope.$digest();
        expect(scope.eventId).toBeUndefined();
        expect(scope.data).toBeUndefined();
        scope.eventId = 1;
        scope.data={
            id: 2,
            value: 5
        };
        scope.foo = 'x';
        scope.gridEventHandler(scope.eventId, scope.data);
        //expect(scope.foo).toEqual('x!!!');
        //console.log("gridEventHandler works");
//        expect(scope.eventId).toEqual(1);
//        expect(scope.data.id).toEqual(2);
//        console.log("values are set");

    }));
    //TESTING
//    it('should update baz when bar is changed', function (){
//        //change bar
//        scope.bar = 'test';
//
//        //$apply the change to trigger the $watch.
//        scope.$apply();
//
//        //assert
//        expect(scope.baz).toEqual('testbaz');
//    });
    
    it('should update fizz asynchronously when test2() is called', function (){
        // just make the call
        _httpBackend.flush();
        scope.poSearch();
        //console.log(scope.postObject);
//        expect(scope.data).toEqual({
//            returnStatus: 'Success',
//                returnCode: null,
//                returnMessage: 'SUCCESS',
//                pageInfo: {
//                        totalRecords: '64764',
//                        currentPage: '0',
//                        itemsPerPage: '100'
//                },
//                serviceOrderList:[
//                    {
//                        techOrderIndicator:'false',
//                        attUserId:null,
//                        projectOrderId:'7212',                    
//                        projectOrderType: 'CNL',
//                        bpelProcessId: null,
//                        orderActivity: null,
//                        orderRegion: null,
//                        domainIndicator: null,
//                        projectDueDate: '2009-12-31 00:00:00.0',
//                        desiredDueDate: null,
//                        projectCustomerName: null,
//                        projectCCNA: null,
//                        projectBAN: null,
//                        projectACNA: null,
//                        projectServiceId: null,
//                        projectExternalOrderId: 'ooo',
//                        projectOrderAction: 'New',
//                        projectDecompositionMode: null,
//                        projectOrderVersion: '5212',
//                        projectOrderPass: null,
//                        projectOrderStatus: 'InProgress',
//                        projectCurrentStep: null,
//                        projectLastUpdated: null,
//                        projectCreatedOn: '2009-12-08 16:04:15.367',
//                        projectCreatedBy: null,
//                        projectLastUpdatedBy: null,
//                        projectCustomerCode: null,
//                        projectCustomerCKTID: null,
//                        projectCustomerSVID: null,
//                        projectPon: null,
//                        projectUSO: null,
//                        projectCommittedDueDate: null,
//                        projectProductType: null,
//                        projectSuppNo: null,
//                        sourceSystem: null,
//                        techOrderId: null,
//                        techVersion: null,
//                        techProvisioningStatus: null,
//                        techProvisioningStatusDateFrom: null,
//                        techScOrderId: null,
//                        techTirksClo: null,
//                        optId: null,
//                        reserveProject: null,
//                        diversityIndicator: null,
//                        techRubyTicketNbr: null,
//                        techRubyErrorMsg: null,
//                        techParentOrderType: null,
//                        techSuppNo: null,
//                        techProjectOriginalSuppNo: null,
//                        techOrderPonrFlag: false,
//                        flowIndicator: null,
//                        ortIndicator: false,
//                        ponrFlag: false,
//                        rtpIndicator: null,
//                        moveOrderType: null,
//                        changeOrderType: null,
//                        createdInRelease: null,
//                        pivotOrderAction: null,
//                        asrItemId: null,
//                        rollbackStatus: null,
//                        rollbackMessage: null,
//                        supportCancel: false,
//                        supportSupp: false,
//                        supportGenerateTechOrder: false,
//                        supportRollback: false,
//                        supportEvcRegress: false,
//                        requestingRollback: false,
//                        serviceType: 'CNL Facility',
//                        complexMacdIndicator: null,
//                        bulkMoveIndicator: null,
//                        bulkMoveId: null,
//                        customerCircuitReference: null,
//                        tirksCacCode: null,
//                        uVerseBan: null,
//                        graniteWOID: null
//                    }
//                ],
//                tableRows: {
//    		rowMetaData: {
//    			columnList: [
//    				{
//    					id: "projectOrderId",
//    					displayName: "Project Order ID",
//    					hyperlink: true
//    				},
//    				{
//    					id: "suppNo",
//    					displayName: "Supp No",
//    					hyperlink: false
//    				},
//    				{
//    					id: "externalOrderId",
//    					displayName: "external Order ID",
//    					hyperlink: false
//    				},
//    				{
//    					id: "serviceId",
//    					displayName: "Service ID",
//    					hyperlink: false
//    				},
//    				{
//    					id: "orderType",
//    					displayName: "Order Type",
//    					hyperlink: false
//    				},
//    				{
//    					id: "orderAction",
//    					displayName: "Order Action",
//    					hyperlink: false
//    				},
//    				{
//    					id: "creationDate",
//    					displayName: "Creation Date",
//    					hyperlink: false
//    				},
//    				{
//    					id: "createdBy",
//    					displayName: "Created By",
//    					hyperlink: false
//    				},
//    				{
//    					id: "dueDate",
//    					displayName: "Due Date",
//    					hyperlink: false
//    				},
//    				{
//    					id: "orderStatus",
//    					displayName: "Order Status",
//    					hyperlink: false
//    				},
//    				{
//    					id: "customerCode",
//    					displayName: "Customer Code",
//    					hyperlink: false
//    				},
//    				{
//    					id: "customerName",
//    					displayName: "Customer Name",
//    					hyperlink: false
//    				},
//    				{
//    					id: "ckr",
//    					displayName: "CKR",
//    					hyperlink: false
//    				},
//    				{
//    					id: "svId",
//    					displayName: "SVID",
//    					hyperlink: false
//    				},
//    				{
//    					id: "ban",
//    					displayName: "BAN",
//    					hyperlink: false
//    				},
//    				{
//    					id: "acna",
//    					displayName: "ACNA",
//    					hyperlink: false
//    				},
//    				{
//    					id: "uverseBan",
//    					displayName: "U-Verse BAN",
//    					hyperlink: false
//    				},
//    				{
//    					id: "rtpIndicator",
//    					displayName: "RTP Indicator",
//    					hyperlink: false
//    				}
//    			]
//    		},
//                    rowValueList:[
//                        {
//                            cellValues: [
//                                "7212",
//                                null,
//                                "ooo",
//                                null,
//                                "CNL",
//                                "New",
//                                "2009-12-08 16:04:15.367",
//                                null,
//                                "2009-12-31 00:00:00.0",
//                                "InProgress",
//                                null,
//                                null,
//                                null,
//                                null,
//                                null,
//                                null,
//                                null,
//                                null
//                            ]
//                        }
//                    ]
//                }
//        });
        
        //OrderSearchJsonService.getProjectOrderSummary();
        // assert that it called the service method.
        //expect(orderSearchMock.getProjectOrderSummary).toHaveBeenCalled();  

        // call $timeout.flush() to flush the unresolved dependency from our
        // someServiceMock.
        $timeout.flush();

        // assert that it set $scope.fizz
        //expect(scope.fizz).toEqual('weee');    
    });
    
//    it('should run poSearch', inject(function($rootScope){
//        
//        
//        //Problem: it is calling the marshalPOSearchRequest method with something defined as currentPage (initially 0)
//        //returns a postObject 
//        //postObject has many properties that get set to what the user selects on the PO Search screen
//        //and error it throws is name is not defined since name is what the user selects
//        //postObject is an object that has properties stored from user input
//        
//        
//        //Test 1: create a mock user input to make sure it is setting the properties correctly
//        //$scope.poSearch.orderType.name = 
//        
//        var testObject = {
//            orderType : 'INL',
//            orderAction :'',
//            orderStatus: '',
//            pageInfo:'',
//            externalOrderId:'',
//            uso:'',
//            decompMode:'',
//            currentStep:'',
//            icsc:'',
//            projectOrderId:'',
//            serviceId:'',
//            customerName:'',
//            projectCustomerCode:'',
//            ban:'',
//            acna:'',
//            createdBy:'',
//            dueDateFrom:'',
//            dueDateTo:'',
//            createdOnFrom:'',
//            lastUpdatedFrom:'',
//            lastUpdatedTo:'',
//            lastUpdatedBy:'',
//            projectCustomerSVID:'',
//            customerCircuitId:'',
//            rtpIndicator:'',
//            complexMacdIndicator:'',
//            customerCircuitReference:''
//        };
//        
//
//        
//        
//        //Test 2: Use the data object and make a mock object - what Yann-Ming said last week
//        //data is an object with metadata for the data table, returns records based on user search
//        
//        
//        $rootScope.$digest();
//        var data = {
//            returnStatus: 'Success',
//            returnCode: null,
//            returnMessage: 'SUCCESS',
//            pageInfo: {
//                    totalRecords: '64764',
//                    currentPage: '0',
//                    itemsPerPage: '100'
//            },
//            serviceOrderList:[
//                {
//                    techOrderIndicator:'false',
//                    attUserId:null,
//                    projectOrderId:'7212',                    
//                    projectOrderType: 'CNL',
//                    bpelProcessId: null,
//                    orderActivity: null,
//                    orderRegion: null,
//                    domainIndicator: null,
//                    projectDueDate: '2009-12-31 00:00:00.0',
//                    desiredDueDate: null,
//                    projectCustomerName: null,
//                    projectCCNA: null,
//                    projectBAN: null,
//                    projectACNA: null,
//                    projectServiceId: null,
//                    projectExternalOrderId: 'ooo',
//                    projectOrderAction: 'New',
//                    projectDecompositionMode: null,
//                    projectOrderVersion: '5212',
//                    projectOrderPass: null,
//                    projectOrderStatus: 'InProgress',
//                    projectCurrentStep: null,
//                    projectLastUpdated: null,
//                    projectCreatedOn: '2009-12-08 16:04:15.367',
//                    projectCreatedBy: null,
//                    projectLastUpdatedBy: null,
//                    projectCustomerCode: null,
//                    projectCustomerCKTID: null,
//                    projectCustomerSVID: null,
//                    projectPon: null,
//                    projectUSO: null,
//                    projectCommittedDueDate: null,
//                    projectProductType: null,
//                    projectSuppNo: null,
//                    sourceSystem: null,
//                    techOrderId: null,
//                    techVersion: null,
//                    techProvisioningStatus: null,
//                    techProvisioningStatusDateFrom: null,
//                    techScOrderId: null,
//                    techTirksClo: null,
//                    optId: null,
//                    reserveProject: null,
//                    diversityIndicator: null,
//                    techRubyTicketNbr: null,
//                    techRubyErrorMsg: null,
//                    techParentOrderType: null,
//                    techSuppNo: null,
//                    techProjectOriginalSuppNo: null,
//                    techOrderPonrFlag: false,
//                    flowIndicator: null,
//                    ortIndicator: false,
//                    ponrFlag: false,
//                    rtpIndicator: null,
//                    moveOrderType: null,
//                    changeOrderType: null,
//                    createdInRelease: null,
//                    pivotOrderAction: null,
//                    asrItemId: null,
//                    rollbackStatus: null,
//                    rollbackMessage: null,
//                    supportCancel: false,
//                    supportSupp: false,
//                    supportGenerateTechOrder: false,
//                    supportRollback: false,
//                    supportEvcRegress: false,
//                    requestingRollback: false,
//                    serviceType: 'CNL Facility',
//                    complexMacdIndicator: null,
//                    bulkMoveIndicator: null,
//                    bulkMoveId: null,
//                    customerCircuitReference: null,
//                    tirksCacCode: null,
//                    uVerseBan: null,
//                    graniteWOID: null
//                }
//            ],
//            tableRows: {
//		rowMetaData: {
//			columnList: [
//				{
//					id: "projectOrderId",
//					displayName: "Project Order ID",
//					hyperlink: true
//				},
//				{
//					id: "suppNo",
//					displayName: "Supp No",
//					hyperlink: false
//				},
//				{
//					id: "externalOrderId",
//					displayName: "external Order ID",
//					hyperlink: false
//				},
//				{
//					id: "serviceId",
//					displayName: "Service ID",
//					hyperlink: false
//				},
//				{
//					id: "orderType",
//					displayName: "Order Type",
//					hyperlink: false
//				},
//				{
//					id: "orderAction",
//					displayName: "Order Action",
//					hyperlink: false
//				},
//				{
//					id: "creationDate",
//					displayName: "Creation Date",
//					hyperlink: false
//				},
//				{
//					id: "createdBy",
//					displayName: "Created By",
//					hyperlink: false
//				},
//				{
//					id: "dueDate",
//					displayName: "Due Date",
//					hyperlink: false
//				},
//				{
//					id: "orderStatus",
//					displayName: "Order Status",
//					hyperlink: false
//				},
//				{
//					id: "customerCode",
//					displayName: "Customer Code",
//					hyperlink: false
//				},
//				{
//					id: "customerName",
//					displayName: "Customer Name",
//					hyperlink: false
//				},
//				{
//					id: "ckr",
//					displayName: "CKR",
//					hyperlink: false
//				},
//				{
//					id: "svId",
//					displayName: "SVID",
//					hyperlink: false
//				},
//				{
//					id: "ban",
//					displayName: "BAN",
//					hyperlink: false
//				},
//				{
//					id: "acna",
//					displayName: "ACNA",
//					hyperlink: false
//				},
//				{
//					id: "uverseBan",
//					displayName: "U-Verse BAN",
//					hyperlink: false
//				},
//				{
//					id: "rtpIndicator",
//					displayName: "RTP Indicator",
//					hyperlink: false
//				}
//			]
//		},
//                rowValueList:[
//                    {
//                        cellValues: [
//                            "7212",
//                            null,
//                            "ooo",
//                            null,
//                            "CNL",
//                            "New",
//                            "2009-12-08 16:04:15.367",
//                            null,
//                            "2009-12-31 00:00:00.0",
//                            "InProgress",
//                            null,
//                            null,
//                            null,
//                            null,
//                            null,
//                            null,
//                            null,
//                            null
//                        ]
//                    }
//                ]
//            }
//        };
//        expect(scope.isLoading).toEqual(false);
//        
//        scope.populatePicklistValues();
//        scope.setPicklistsToDefaultValues();
//        scope.poSearch();
//        scope.poSearch.orderType.name = 'INL';
//        scope.poSearch.orderAction.name = 'New';
//        scope.poSearch.orderStatus.name = 'InProgress';
//        //expect(scope.isLoading).toEqual(true);
//        //expect($rootScope.postObject.orderType).toEqual(data.)
//    }));
    
//    it('should run clear method', inject(function($rootScope){
//        $rootScope.$digest();
//        
//        
//        
//        
//        expect(scope.poSearch.projectOrderId).toBeUndefined();
//        expect(scope.poSearch.orderType).toBeUndefined();
//        //scope.poSearch.orderType = scope.poOrderTypeList[0];
//        
//        scope.clear();
//        //scope.poOrderTypeList = ['UNI', 'EVC'];
//        expect(scope.poSearch.projectOrderId).toEqual('');
//        //expect(scope.poSearch.orderType).toEqual('UNI');
//    }));
    
    //Mock service to get the picklists
    
    

});

//Mock service to get the picklists
//describe('Mocking the service', function(){
//    //get the picklists in before each
//    //rootScope.digest()
//    //it('gets the picklist values')
//    //expect the scope variables to match my sample object
//    var $scope, ctrl, $timeout;
//    var poSearchDataServiceMock;
//    beforeEach(function(){
//        poSearchDataServiceMock = jasmine.createSpyObj('OrderSearchJsonService', ['getProjectOrderSummary']);
//        module('canopi.app');
//        
//        inject(function($rootScope, $controller, $q, _$timeout_) {
//             $scope = $rootScope.$new();
//             pickListServiceMock.getProjectOrderSummary.andReturn($q.when('weee'));
//             
//             $timeout = _$timeout_;
//             
//              ctrl = $controller('MainCtrl', {
//                $scope: $scope,
//                pickListService: pickListServiceMock
//              });
//        });
//    });
//    
//    it('something posearch', function(){
//        $scope.poSearch();
//        expect(pickListServiceMock.getProjectOrderSummary).toHaveBeenCalled();
//        $timeout.flush();
//        expect($scope.fizz).toEqual('weee'); 
//    });
//});