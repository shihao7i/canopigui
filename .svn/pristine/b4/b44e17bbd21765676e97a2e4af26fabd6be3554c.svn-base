'use strict';

angular.module('admin.app').controller('LookupAdminController', ['$scope', '$log', '$filter', 'uiGridExporterConstants', 'uiGridConstants', 'lookupTypes', 'AdminLookupService', 'ModalRowEdit',
    function ($scope, $log, $filter, uiGridExporterConstants, uiGridConstants, lookupTypes, AdminLookupService, ModalRowEdit) {
        var vm = this;

        vm.lookupTypes = lookupTypes;
        vm.uiGridExporterConstants = uiGridExporterConstants;

        // Load default values
        vm.lookupType = vm.lookupTypes[0];
        vm.mySlections = [];

        // Configure grid
        vm.gridOptions = {
            enableSelectAll: false,
            enableHorizontalScrollbar: uiGridConstants.NEVER,
            enableColumnMenus: false,
            multiSelect: false,
            exporterCsvFilename: vm.lookupType.value + '.csv',
            exporterMenuPdf: false,
            onRegisterApi: function (gridApi) {
                vm.gridApi = gridApi;
                // Register Events
                gridApi.selection.on.rowSelectionChanged($scope, rowSelectionChanged);
                gridApi.rowEdit.on.saveRow($scope, saveRow);
            }
        };

        AdminLookupService.getLookupType('jeopardycodes').then(function (data) {
            vm.data = extractTableCellValues(data.tableRows);
            vm.gridOptions.data = vm.data;
            vm.gridOptions.columnDefs = extractColumnDefs(data.tableRows);
        });

        // Handle grid events
        function rowSelectionChanged(row) {
            vm.selectedRow = row.isSelected ? row.entity : false;
            vm.gridApi.cellNav.scrollTo(row.entity);
        }

        function saveRow(row) {
            // Fired when a row is saved
        }

        vm.changeLookupType = function () {
            AdminLookupService.getLookupType(vm.lookupType.value).then(function (data) {
                vm.data = extractTableCellValues(data.tableRows);
                vm.gridOptions.data = vm.data;
                vm.gridOptions.columnDefs = extractColumnDefs(data.tableRows);
                vm.gridOptions.exporterCsvFilename = vm.lookupType.value + '.csv';
            });
        };

        vm.addItem = function () {
            ModalRowEdit.open(vm.gridOptions.columnDefs).then(function (newItem) {
                vm.gridOptions.data.push(newItem);
            });
        };

        vm.remove = function () {
            // Remove an item
        };

        vm.export = function () {
            vm.gridApi.exporter.csvExport(vm.uiGridExporterConstants.ALL, vm.uiGridExporterConstants.ALL);
        };

        /**
         * Workaround to filter on all columns
         * @todo Remove this when ui-grid provides this natively
         */
        vm.refreshData = function (filter) {
            vm.gridOptions.data = vm.data;
            while (filter) {
                var oSearchArray = filter.split(' ');
                vm.gridOptions.data = $filter('filter')(vm.gridOptions.data, oSearchArray[0], undefined);
                oSearchArray.shift();
                filter = (oSearchArray.length !== 0) ? oSearchArray.join(' ') : '';
            }
        };

        // help method to build ng-grid's columnDefs property based on meta data column attributes
        function extractColumnDefs(tableData) {
            var uniqueColumns = _.uniq(tableData.rowMetaData.columnList, 'id'),
                    // map meta data column defs to the column defs ng-grid expects
                    columnDefMap = {
                        id: 'field',
                        displayName: 'displayName'
                    };

            var columnDefs = uniqueColumns.map(function (id) {
                var t = {};
                for (var key in columnDefMap) {
                    t[columnDefMap[key]] = id[key];
                }
                ;
                return t;
            });

            // Add cellTemplate
            _.forEach(columnDefs, function (def) {
                def.cellTemplate = "" +
                        "   <div ng-if='COL_FIELD.length > 40' class='ui-grid-cell-contents' tooltip='{{COL_FIELD CUSTOM_FILTERS}}'>{{COL_FIELD CUSTOM_FILTERS}}</div>" +
                        "   <div ng-if='COL_FIELD.length <= 40' class='ui-grid-cell-contents'>{{COL_FIELD CUSTOM_FILTERS}}</div>";
            });

            return columnDefs;
        }

        // help method to build ng-grid's data property based on meta data row values
        function extractTableCellValues(tableData) {

            var localRowData = [];
            var cellsInRow = [];

            var totalCols = tableData.rowMetaData.columnList.length;
            var totalRows = tableData.rowMetaData.rowValueList.length;

            for (var i = 0; i < totalRows; i++) {

                cellsInRow = tableData.rowMetaData.rowValueList[i].cellValues;

                var obj = {};

                for (var j = 0; j < totalCols; j++) {
                    obj[tableData.rowMetaData.columnList[j]['id']] = cellsInRow[j];
                }

                localRowData.push(obj);
            }

            return localRowData;
        }
    }]);