'use strict';

angular.module('admin.app').controller('MobilityOrdersController',
    ['$scope', '$templateCache', 'uiGridExporterConstants', '$log', '$q', '$interval', 'orderPicklists', 'AdminJsonService', 'UiGridUtilService',
        function ($scope, $templateCache, uiGridExporterConstants, $log, $q, $interval, orderPicklists, AdminJsonService, UiGridUtilService) {

            // Revert templateCache
            $templateCache.put('ui-grid/selectionRowHeader',
                "<div class=\"ui-grid-disable-selection\"><div class=\"ui-grid-cell-contents\"><ui-grid-selection-row-header-buttons></ui-grid-selection-row-header-buttons></div></div>"
            );

            var vm = this;

            init();


            function init() {

                initializeVMVariables();

                setupUiGridForSearchResults();
                setupUiGridForSelectedWO();
                setupUiGridForTaskList();
                setupUiGridForAddTask();
                setupUiGridForUDA();

                setupVMMethods();
            }


            function initializeVMVariables() {

                vm.poTypeCurrentSelection = [];
                vm.woTypeCurrentSelection = [];
                
                vm.poTypeMultiselectPickList = orderPicklists.poTypes;
                vm.woTypeMultiselectPickList = orderPicklists.woTypes;
            
                vm.displayTable = false;
                vm.displayOrderDetails = false;

                // this object will be populated in
                // orderPicklists => { poTypes, woTypes }
                vm.searchButtonDisabled = true;
                vm.clearButtonDisabled = true;

                vm.searchAccordionOpen = true;
                vm.searchResultsOpen = true;
                vm.orderPicklists = orderPicklists;
                vm.poType = orderPicklists.poTypes;
                vm.woType = orderPicklists.woTypes;

                //TOP TABLE 1
                vm.gridOptionsSearchResults = {};

                //Selected WO
                vm.gridOptionsSelectedWO = {};

                //MIDDLE TABLE 2
                vm.gridOptionsTaskListTable = {};
                //BOTTOM TABLE 3
                vm.gridOptionsUDATable = {};

                vm.isLoading = true;

                vm.testit = function () {
                    $log.debug("Test it ...");
                }

                vm.uiGridExporterConstants = uiGridExporterConstants;

            }


            function setupUiGridForSearchResults() {

                vm.gridOptionsSearchResults = {
                    enableRowSelection: true,
                    enableRowHeaderSelection: false,
                    enableHorizontalScrollbar: 0,
                    multiSelect: false,
                    rowHeight: 45,
                    onRegisterApi: function (gridApi) {
                        vm.gridApiSearchResults = gridApi;
                        // Register Events
                        gridApi.selection.on.rowSelectionChanged($scope, rowSelectionChangedSearchResults);
                    }
                };


                // Handle grid events for Top Table
                function rowSelectionChangedSearchResults(row) {
                    vm.selectedRow = row.isSelected ? row.entity : false;

                    vm.buildColumnDefsAndDataForSelectedWO(row);

                    displayOrderDetail(vm.selectedRow.woType);
                }


                function displayOrderDetail(woType) {

                    // use only mock data for ETTCSNewCabinet only for now
                    var workorderTypeFileName = "ettcsnewcabinet";

                    AdminJsonService.getTasks(workorderTypeFileName).then(function (data) {

                        // Load a special header template that has href links
                        UiGridUtilService.loadTemplate('ui-grid/uiGridHeaderCellSpecial');

                        vm.displayOrderDetails = true;

                        var tableData = data.tableRows;

                        vm.gridOptionsTaskListTable.data = UiGridUtilService.extractTableCellValues(tableData);

                        var colDefs = UiGridUtilService.extractColumnDefs(tableData, {headerCellTemplate: 'ui-grid/uiGridHeaderCellSpecial', woType: woType});

                        colDefs = UiGridUtilService.autoColWidth(colDefs, tableData.rowMetaData);

                        vm.gridOptionsTaskListTable.columnDefs = colDefs;
                        
                        
                        vm.selectedWoType = vm.gridOptionsSelectedWO.data[0].woType;
                        vm.gridOptionsTaskListTable.exporterCsvFilename = vm.selectedWoType+'tasks.csv';

                    });

                    AdminJsonService.getUserDefinedAttributes().then(function (data) {

                        var tableData = data.tableRows;

                        vm.gridOptionsUDATable.data = UiGridUtilService.extractTableCellValues(tableData);
                        var colDefs = UiGridUtilService.extractColumnDefs(tableData);
                        colDefs = UiGridUtilService.autoColWidth(colDefs, tableData.rowMetaData);
                        vm.gridOptionsUDATable.columnDefs = colDefs;

                    });
                }
            }


            function setupUiGridForSelectedWO() {

                vm.gridOptionsSelectedWO = {
                    enableCellEditOnFocus: true,
                    enableCellEdit: false,
                    enableRowSelection: true,
                    enableRowHeaderSelection: true,
                    enableHorizontalScrollbar: 0,
                    enableVerticalScrollbar: 0,
                    multiSelect: false,
                    rowHeight: 45,
                    onRegisterApi: function (gridApi) {
                        vm.gridApiSelectedWO = gridApi;
                        // Register Events
                        //gridApi.selection.on.rowSelectionChanged($scope, rowSelectionChangedWO);
                    }
                };


                vm.buildColumnDefsAndDataForSelectedWO = function (row) {
                    //$log.debug("inside build method");
                    // copy the columnDefs from search results table to Selected WO row
                    //vm.gridOptionsSelectedWO.columnDefs = angular.copy(vm.gridOptionsSearchResults.columnDefs);

                    vm.gridOptionsSelectedWO.data = [row.entity];                    

                    // find WO Description field and set it to editable
                    for (var i = 0; i < vm.gridOptionsSelectedWO.columnDefs.length; i++) {
                        //vm.gridOptionsSelectedWO.columnDefs[i].enableCellEdit = false;
                        if (vm.gridOptionsSelectedWO.columnDefs[i].id === 'woDescription') {
                            vm.gridOptionsSelectedWO.columnDefs[i].enableCellEdit = true;
                            //vm.gridOptionsSelectedWO.columnDefs[i].enableCellEdit= true;
                            //vm.gridOptionsSelectedWO.columnDefs[i].enableCellEditOnFocus= true;
                            break;
                        }
                    }
                }


                // TODO: define all the functions needed for Seltect WO update operations
                vm.wo = {

                    updateWO: function () {

                    },

                    cancel: function () {

                    }
                };

            }


            function setupUiGridForTaskList() {

                vm.gridOptionsTaskListTable = {
                    enableCellEditOnFocus: true,
                    enableRowSelection: true,
                    rowHeight: 45,
                    //enableRowHeaderSelection: false,
                    //enableHorizontalScrollbar: 0,
                    multiSelect: false,
                    //showGridFooter:true,
                    //enableFooterTotalSelected:true,
                    enableSorting: false,
                    //exporterCsvFilename: vm.selectedWoType + 'tasks.csv',
                    exporterMenuPdf: false,
                    exporterMenuCsv: false,
                    enableGridMenu: true,
                    gridMenuCustomItems: [
                        {
                            title: 'Hide Empty Columns',
                            action: function () {
                                vm.toggleEmptyColumns();
                            }
                        },
                        {
                            title: 'Reset Columns',
                            action: function () {
                                displayOrderDetail();
                            }
                        }
                    ],
                    onRegisterApi: function (gridApi) {
                        vm.gridApiTaskList = gridApi;
                        gridApi.selection.on.rowSelectionChanged($scope, rowSelectionChangedTaskList);
                        //saving inline edited rows
                        //gridApi.rowEdit.on.saveRow($scope, saveRow);
                    }
                };


                function rowSelectionChangedTaskList(row) {
                    var msg = 'row selected ' + row.isSelected;
                    $log.log(msg);

                    vm.selectedRow = row.entity;
                    //vm.gridApiTaskList.cellNav.scrollToFocus(vm.selectedRow);
                    $log.debug("scrolled");

                    vm.selectedIndex = vm.gridOptionsTaskListTable.data.lastIndexOf(vm.selectedRow);
                    vm.previousIndex = vm.selectedIndex - 1;
                    vm.nextIndex = vm.selectedIndex + 1;
                    //These checks happen once per selected row
                    //Is the selected row already the last Element? Then disable the down button
                    //Is the selected row the first element in the list? Then disable the up button
                    if (vm.nextIndex === (vm.gridOptionsTaskListTable.data.length)) {
                        vm.lastElement = true;
                        vm.firstElement = false;
                    }
                    else {
                        vm.lastElement = false;
                    }

                    if (vm.previousIndex < 0) {
                        vm.firstElement = true;
                        vm.lastElement = false;
                    }
                    else {
                        vm.firstElement = false;
                    }
                };


                // TODO: define all the functions needed for Task List operations
                vm.tasklist = {

                    moveSelectedUp: function () {

                        vm.selectedIndex = vm.gridOptionsTaskListTable.data.lastIndexOf(vm.selectedRow);
                        if (vm.previousIndex > -1) {

                            vm.previousIndex = vm.selectedIndex - 1;
                            vm.nextIndex = vm.selectedIndex + 1;

                            vm.previousRowData = vm.gridOptionsTaskListTable.data[vm.previousIndex];

                            vm.nextRowData = vm.gridOptionsTaskListTable.data[vm.nextIndex];

                            vm.gridOptionsTaskListTable.data[vm.previousIndex] = vm.gridOptionsTaskListTable.data[vm.selectedIndex];
                            vm.gridOptionsTaskListTable.data[vm.selectedIndex] = vm.previousRowData;
                            vm.selectedIndex = vm.selectedIndex - 1;

                            vm.checkStart();
                            vm.checkEnd();
                        }

                        else {

                        }
                        //vm.gridApiTaskList.cellNav.scrollToFocus(vm.selectedRow);

                    },

                    moveSelectedDown: function () {

                        vm.selectedIndex = vm.gridOptionsTaskListTable.data.lastIndexOf(vm.selectedRow);

                        if (vm.nextIndex !== vm.gridOptionsTaskListTable.data.length) {

                            vm.previousIndex = vm.selectedIndex - 1;
                            vm.nextIndex = vm.selectedIndex + 1;

                            vm.previousRowData = vm.gridOptionsTaskListTable.data[vm.previousIndex];

                            vm.nextRowData = vm.gridOptionsTaskListTable.data[vm.nextIndex];

                            vm.gridOptionsTaskListTable.data[vm.nextIndex] = vm.gridOptionsTaskListTable.data[vm.selectedIndex];
                            vm.gridOptionsTaskListTable.data[vm.selectedIndex] = vm.nextRowData;
                            vm.selectedIndex = vm.selectedIndex + 1;

                            vm.checkEnd();
                            vm.checkStart();
                        }
                        else {
                            //vm.nextIndex = vm.selectedIndex+1;
                        }
                        //vm.gridApiTaskList.cellNav.scrollToFocus(vm.selectedRow);
                    },

                    addTask: function () {

                        AdminJsonService.getAllTasks().then(function (data) {

                            var tableData = data.tableRows;

                            vm.gridOptionsAddTaskSelectTable.data = UiGridUtilService.extractTableCellValues(tableData);
                            var colDefs = UiGridUtilService.extractColumnDefs(tableData);
                            colDefs = UiGridUtilService.autoColWidth(colDefs, tableData.rowMetaData);
                            vm.gridOptionsAddTaskSelectTable.columnDefs = colDefs;

                        });
                    },

                    removeTask: function () {

                        // Remove an item
                        vm.gridOptionsTaskListTable.data.splice(vm.gridOptionsTaskListTable.data.lastIndexOf(vm.selectedRow), 1);

                    },

                    saveTasks: function () {

                    },

                    cancel: function () {

                    },
                    
                    recalcTaskSequence: function () {
                        
                        // this is a new task list with the re-sequenced tasks
                        var sequencedData = [];
                        var sequenceNumber = 10; // start with 10 (incremted by 10)
                       
                        var rowData;
                        
                        for (var i=0; i < vm.gridOptionsTaskListTable.data.length; i++) {
                            rowData = angular.copy(vm.gridOptionsTaskListTable.data[i]);
                            if (rowData.taskParallelToPrevious === "YES") {
                                rowData.taskSequence = sequenceNumber.toString();
                            }
                            else {
                                // the sequence should start with 10 for the table
                                if (i > 0) {
                                    sequenceNumber += 10;
                                }
                                rowData.taskSequence = sequenceNumber.toString();
                            }
                            
                            sequencedData.push(rowData);
                        }
                
                        // update data with newly calculated task sequence numbers 
                        vm.gridOptionsTaskListTable.data = sequencedData;
          
                    },

                    export: function () {
                        vm.gridApiTaskList.exporter.csvExport(vm.uiGridExporterConstants.ALL, vm.uiGridExporterConstants.ALL);
                    }

                };

                vm.checkStart = function () {
                    vm.previousIndex = vm.selectedIndex - 1;
                    if (vm.previousIndex < 0) {
                        vm.firstElement = true;
                    }
                    else {
                        vm.firstElement = false;
                    }
                }

                vm.checkEnd = function () {
                    vm.nextIndex = vm.selectedIndex + 1;
                    if (vm.nextIndex === vm.gridOptionsTaskListTable.data.length) {
                        vm.lastElement = true;
                    }
                    else {
                        vm.lastElement = false;
                    }
                };

                vm.insertCopyAtLocation = function () {
                    vm.newRowIndex = vm.selectedIndex + 1;
                    var dataCopy = angular.copy(vm.gridOptionsTaskListTable.data);
                    dataCopy.splice(vm.newRowIndex, 0, {
                        taskName: '',
                        taskSequence: '',
                        taskDescription: '',
                        tasksDuration: '',
                        tasksEscalation: ''
                    });
                    dataCopy[vm.newRowIndex] = vm.gridOptionsTaskListTable.data[vm.selectedIndex];
                    vm.gridOptionsTaskListTable.data = dataCopy;

                };


                function saveRow(rowEntity) {
                    // create a fake promise - normally you'd use the promise returned by $http or $resource
                    var deferred = $q.defer();
                    vm.gridApiTaskList.rowEdit.setSavePromise(rowEntity, deferred.promise);
                    // fake a delay of 3 seconds whilst the save occurs, return error if gender is "male"
                    $interval(function () {
                        if (rowEntity.gender === 'male') {
                            deferred.reject();
                        } else {
                            deferred.resolve();
                        }
                    }, 3000, 1);
                }

            }


            function setupUiGridForAddTask() {

                vm.gridOptionsAddTaskSelectTable = {
                    enableRowSelection: true,
                    multiSelect: false,
                    enableSorting: false,
                    rowHeight: 45,
                    enableGridMenu: true,
                    onRegisterApi: function (gridApi) {
                        vm.gridApiAddTask = gridApi;
                        // Register Events
                        gridApi.selection.on.rowSelectionChanged($scope, rowSelectionChangedAddTask);
                    }
                };


                function rowSelectionChangedAddTask(row) {
                    vm.selectedRow = row.isSelected ? row.entity : false;

                }

            }


            function setupUiGridForUDA() {

                vm.gridOptionsUDATable = {
                    enableCellEditOnFocus: true,
                    enableRowSelection: true,
                    //enableRowHeaderSelection: false,
                    enableHorizontalScrollbar: 0,
                    multiSelect: false,
                    rowHeight: 45,
                    enableSorting: false,
                    onRegisterApi: function (gridApi) {
                        vm.gridApiUDA = gridApi;
                        gridApi.selection.on.rowSelectionChanged($scope, rowSelectionChangedUDA);
                        //saving inline edited rows
                        //gridApi.rowEdit.on.saveRow($scope, saveRow);
                    }
                };


                function rowSelectionChangedUDA(row) {
                    vm.selectedRowUDA = row.entity;

                }


                // TODO: define all the functions needed for Seltect UDA add/update operations
                vm.uda = {

                    saveUDA: function () {
                        if (vm.selectedRowUDA) {
                            vm.selectedIndex = vm.gridOptionsUDATable.data.lastIndexOf(vm.selectedRowUDA);
                            vm.gridOptionsUDATable.data.splice(vm.selectedIndex + 1, 0, {});
                        }
                        else {
                            var newItem = {};
                            vm.gridOptionsUDATable.data.push(newItem);
                        }
                    },

                    updatUDA: function () {

                    },

                    cancel: function () {

                    },

                    addUDA: function () {
                        if (vm.selectedRowUDA) {
                            vm.selectedIndex = vm.gridOptionsUDATable.data.lastIndexOf(vm.selectedRowUDA);
                            vm.gridOptionsUDATable.data.splice(vm.selectedIndex + 1, 0, {});
                        }
                        else {
                            var newItem = {};
                            vm.gridOptionsUDATable.data.push(newItem);
                        }
                    }
                };
            }


            function setupVMMethods() {

                vm.clear = function () {
                    vm.poType = '';
                    vm.woType = '';
                };

                vm.poTypeSelectionEvents = {

                    onItemSelect: function (item) {

                        if (item.id !== undefined || item === "") {
                            if (item.id !== "" && item.id !== undefined) {
                                vm.searchButtonDisabled = false;
                                vm.clearButtonDisabled = false;
                            } else {
                                vm.searchButtonDisabled = true;
                                vm.clearButtonDisabled = true;
                            }
                        }
                    }

                };

                vm.woTypeSelectionEvents = {

                    onItemSelect: function (item) {

                        if (item.id !== undefined || item === "") {
                            if (item.id !== "" && item.id !== undefined) {
                                vm.searchButtonDisabled = false;
                                vm.clearButtonDisabled = false;
                            } else {
                                vm.searchButtonDisabled = true;
                                vm.clearButtonDisabled = true;
                            }
                        }
                    }

                };


                vm.orderSearch = function () {

                    // reset to false before making restful call to get search results
                    vm.displayTable = false;
                    vm.displayOrderDetails = false;

                    var currentPOPicklist = vm.poTypeMultiselectPickListOutput;
                    var currentWOPicklist = vm.woTypeMultiselectPickListOutput;
                    var ordersearchresultpath = "";

                    // If any of the WO type picklist values is selected, then only show one row of the WO data
                    if (currentWOPicklist.length === 0) {
                        // default to show mock data for ETTC PO and related WO types only
                        ordersearchresultpath = "posearchresults-ettcs";
                    } else {
                        // default to show mock data for ETTCNewCabinet WO type only
                        ordersearchresultpath = "wosearchresults-ettcsnewcabinet";
                    }

                    vm.orderSearchPromiseTable = AdminJsonService.getPOSearchResults(ordersearchresultpath).then(function (data) {

                        vm.displayTable = true;

                        var tableData = data.tableRows;
                        vm.gridOptionsSearchResults.data = UiGridUtilService.extractTableCellValues(tableData);
                        vm.gridOptionsSearchResults.columnDefs = UiGridUtilService.extractColumnDefs(tableData);

                        var columns = _.uniq(tableData.rowMetaData.columnList, 'id');

                        angular.forEach(columns, function (column) {
                            if (column.id === "woDescription") {
                                column.editable = true;
                            }
                            //  $log.debug(column);
                        });
                        vm.gridOptionsSelectedWO.columnDefs = angular.copy(vm.gridOptionsSearchResults.columnDefs);
                        //$log.debug(vm.gridOptionsSelectedWO.columnDefs[2]);

                    });

                };
                
                vm.poTypeSelectionClickItemEvent = function (selectedItem) {              
                    if(vm.poTypeMultiselectPickListOutput.length > 0){
                        vm.searchButtonDisabled = false;
                        vm.clearButtonDisabled = false;
                    } else {
                        vm.searchButtonDisabled = true;
                        vm.clearButtonDisabled = true;
                    }
                };

                vm.poTypeSelectionSelectNoneEvent = function () {      
                    vm.searchButtonDisabled = true;
                    vm.clearButtonDisabled = true;          
                };

                vm.poTypeSelectionSelectAllEvent = function () {            
                    vm.searchButtonDisabled = false;
                    vm.clearButtonDisabled = false;      
                };

                vm.poTypeSelectionResetEvent = function () {         
                    vm.searchButtonDisabled = true;
                    vm.clearButtonDisabled = true;   
                };

                vm.woTypeSelectionClickItemEvent = function (selectedItem) {              
                    if(vm.woTypeMultiselectPickListOutput.length > 0){
                        vm.searchButtonDisabled = false;
                        vm.clearButtonDisabled = false;
                    } else {
                        vm.searchButtonDisabled = true;
                        vm.clearButtonDisabled = true;
                    }
                };

                vm.woTypeSelectionSelectNoneEvent = function () {      
                    vm.searchButtonDisabled = true;
                    vm.clearButtonDisabled = true;          
                };

                vm.woTypeSelectionSelectAllEvent = function () {            
                    vm.searchButtonDisabled = false;
                    vm.clearButtonDisabled = false;      
                };

                vm.woTypeSelectionResetEvent = function () {         
                    vm.searchButtonDisabled = true;
                    vm.clearButtonDisabled = true;   
                };

            };

        }]);
