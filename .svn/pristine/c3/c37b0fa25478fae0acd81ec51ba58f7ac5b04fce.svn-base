'use strict';
 
describe('Testing ProjectOrderSearchController', function(){
    
    var scope, _httpBackend, _OrderSearchJsonService, _CommonUtilJsonService;
 
    //mock Application to allow us to inject our own dependencies
    beforeEach(module('canopi.app'));
    beforeEach(module('canopi.service'));

        //load the mock module thus overriding the $state service
    beforeEach(module('stateMock'));

    //mock the controller for the same reason and include $rootScope and $controller
    beforeEach(inject(function($rootScope, $controller, $httpBackend){

        //create an empty scope
        scope = $rootScope.$new();
        _httpBackend = $httpBackend;

        //Jasmine spec runner was returning ‘Error: Unexpected request: GET ... No more request expected.’ 
        // Stub out the rest calls made in canopi.app module's run block
        _httpBackend.expectGET('/canopigui/rest/common/user/get/pb154j').respond([]);
        _httpBackend.expectGET('/canopigui/rest/common/picklists/get').respond([]);
        
        //declare the controller and inject our empty scope
        $controller('ProjectOrderSearchController', {$scope: scope});
        
    }));
    
    // tests start here

    it('should have the correct initial state', inject(function ($rootScope){
   
        $rootScope.$digest();
        
        console.log(scope.name);
 
        expect(scope.name).toEqual('ProjectOrderSearch');
        expect(scope.isLoading).toEqual(false);
        expect(scope.picklistNotReady).toEqual(true);
        expect(scope.displayDataTables).toEqual(false);
        //Date Picker
        expect(scope.datepickers.dueStartDateDatepicker).toEqual(false);
        expect(scope.datepickers.dueEndDateDatepicker).toEqual(false);
        expect(scope.datepickers.dueEndDateDatepicker).toEqual(false);
        expect(scope.datepickers.createdEndDateDatepicker).toEqual(false);
        expect(scope.datepickers.lastUpdatedStartDateDatepicker).toEqual(false);
        expect(scope.datepickers.lastUpdatedEndDateDatepicker).toEqual(false);
        expect(scope.dateOptions.formatYear).toMatch('yy');
        expect(scope.dateOptions.startingDay).toBe(1);
        expect(scope.dateOptions.showWeeks).toMatch("false");
        expect(scope.formats.length).toBe(4);
        expect(scope.formats).toContain('dd-MMMM-yyyy');
        expect(scope.formats).toContain('yyyy/MM/dd');
        expect(scope.formats).toContain('dd.MM.yyyy');
        expect(scope.formats).toContain('shortDate');
        expect(scope.format).toMatch(scope.formats[3]);
        //Angular UI Pagination Setup
        expect(scope.maxSize).toBe(5);
        expect(scope.transclude.bigCurrentPage).toBe(0);
        expect(scope.enablePagination).toEqual(false);
        //Table Records
        expect(scope.tableData.loadTrigger).toBe(0);
        expect(scope.tableData.tableDefinition).toEqual({});
        expect(scope.tableRecords).toBe(0);
        //Accordion
        expect(scope.accordionOpen.search).toEqual(true);
        expect(scope.accordionOpen.table).toEqual(false);
    }));
    
    it('should set datepickers to empty first', inject(function($rootScope){
        
        $rootScope.$digest();
        
        expect(scope.poSearch.dueStartDate).toEqual('');
        expect(scope.poSearch.dueEndDate).toEqual('');
        expect(scope.poSearch.createdStartDate).toEqual('');
        expect(scope.poSearch.createdEndDate).toEqual('');
        expect(scope.poSearch.lastUpdatedStartDate).toEqual('');
        expect(scope.poSearch.lastUpdatedEndDate).toEqual('');
    }));
    
    it('should clear all search fields initally', inject(function($rootScope){
        $rootScope.$digest();
        expect(scope.poSearch.projectOrderId).toBeUndefined();
        //scope.clearPOSearchScopeVariables();
        //expect(scope.poSearch.projectOrderId).toEqual('');        
    }));
    
    it('should run grid event handler', inject(function($rootScope){
        $rootScope.$digest();
        expect(scope.eventId).toBeUndefined();
        expect(scope.data).toBeUndefined();
        scope.eventId = 1;
        scope.data={
            id: 2,
            value: 5
        };
        scope.gridEventHandler(scope.eventId, scope.data);
        console.log("gridEventHandler works");
        expect(scope.eventId).toEqual(1);
        expect(scope.data.id).toEqual(2);
        console.log("values are set");

    }));
    
    it('should run poSearch', inject(function($rootScope){
        
        
        //Problem: it is calling the marshalPOSearchRequest method with something defined as currentPage (initially 0)
        //returns a postObject 
        //postObject has many properties that get set to what the user selects on the PO Search screen
        //and error it throws is name is not defined since name is what the user selects
        //postObject is an object that has properties stored from user input
        
        
        //Test 1: create a mock user input to make sure it is setting the properties correctly
        //$scope.poSearch.orderType.name = 
        
        var testObject = {
            orderType : 'INL',
            orderAction :'',
            orderStatus: '',
            pageInfo:'',
            externalOrderId:'',
            uso:'',
            decompMode:'',
            currentStep:'',
            icsc:'',
            projectOrderId:'',
            serviceId:'',
            customerName:'',
            projectCustomerCode:'',
            ban:'',
            acna:'',
            createdBy:'',
            dueDateFrom:'',
            dueDateTo:'',
            createdOnFrom:'',
            lastUpdatedFrom:'',
            lastUpdatedTo:'',
            lastUpdatedBy:'',
            projectCustomerSVID:'',
            customerCircuitId:'',
            rtpIndicator:'',
            complexMacdIndicator:'',
            customerCircuitReference:''
        };
        scope.poSearch.orderType.name = 'INL';
        scope.poSearch.orderAction.name = 'New';
        scope.poSearch.orderStatus.name = 'InProgress';

        
        
        //Test 2: Use the data object and make a mock object - what Yann-Ming said last week
        //data is an object with metadata for the data table, returns records based on user search
        data = {
            returnStatus: 'Success',
            returnCode: null,
            returnMessage: 'SUCCESS',
            pageInfo: {
                    totalRecords: '64764',
                    currentPage: '0',
                    itemsPerPage: '100'
            },
            serviceOrderList:[
                {
                    techOrderIndicator:'false',
                    attUserId:null,
                    projectOrderId:'7212',                    
                    projectOrderType: 'CNL',
                    bpelProcessId: null,
                    orderActivity: null,
                    orderRegion: null,
                    domainIndicator: null,
                    projectDueDate: '2009-12-31 00:00:00.0',
                    desiredDueDate: null,
                    projectCustomerName: null,
                    projectCCNA: null,
                    projectBAN: null,
                    projectACNA: null,
                    projectServiceId: null,
                    projectExternalOrderId: 'ooo',
                    projectOrderAction: 'New',
                    projectDecompositionMode: null,
                    projectOrderVersion: '5212',
                    projectOrderPass: null,
                    projectOrderStatus: 'InProgress',
                    projectCurrentStep: null,
                    projectLastUpdated: null,
                    projectCreatedOn: '2009-12-08 16:04:15.367',
                    projectCreatedBy: null,
                    projectLastUpdatedBy: null,
                    projectCustomerCode: null,
                    projectCustomerCKTID: null,
                    projectCustomerSVID: null,
                    projectPon: null,
                    projectUSO: null,
                    projectCommittedDueDate: null,
                    projectProductType: null,
                    projectSuppNo: null,
                    sourceSystem: null,
                    techOrderId: null,
                    techVersion: null,
                    techProvisioningStatus: null,
                    techProvisioningStatusDateFrom: null,
                    techScOrderId: null,
                    techTirksClo: null,
                    optId: null,
                    reserveProject: null,
                    diversityIndicator: null,
                    techRubyTicketNbr: null,
                    techRubyErrorMsg: null,
                    techParentOrderType: null,
                    techSuppNo: null,
                    techProjectOriginalSuppNo: null,
                    techOrderPonrFlag: false,
                    flowIndicator: null,
                    ortIndicator: false,
                    ponrFlag: false,
                    rtpIndicator: null,
                    moveOrderType: null,
                    changeOrderType: null,
                    createdInRelease: null,
                    pivotOrderAction: null,
                    asrItemId: null,
                    rollbackStatus: null,
                    rollbackMessage: null,
                    supportCancel: false,
                    supportSupp: false,
                    supportGenerateTechOrder: false,
                    supportRollback: false,
                    supportEvcRegress: false,
                    requestingRollback: false,
                    serviceType: 'CNL Facility',
                    complexMacdIndicator: null,
                    bulkMoveIndicator: null,
                    bulkMoveId: null,
                    customerCircuitReference: null,
                    tirksCacCode: null,
                    uVerseBan: null,
                    graniteWOID: null
                }
            ],
            tableRows: {
		rowMetaData: {
			columnList: [
				{
					id: "projectOrderId",
					displayName: "Project Order ID",
					hyperlink: true
				},
				{
					id: "suppNo",
					displayName: "Supp No",
					hyperlink: false
				},
				{
					id: "externalOrderId",
					displayName: "external Order ID",
					hyperlink: false
				},
				{
					id: "serviceId",
					displayName: "Service ID",
					hyperlink: false
				},
				{
					id: "orderType",
					displayName: "Order Type",
					hyperlink: false
				},
				{
					id: "orderAction",
					displayName: "Order Action",
					hyperlink: false
				},
				{
					id: "creationDate",
					displayName: "Creation Date",
					hyperlink: false
				},
				{
					id: "createdBy",
					displayName: "Created By",
					hyperlink: false
				},
				{
					id: "dueDate",
					displayName: "Due Date",
					hyperlink: false
				},
				{
					id: "orderStatus",
					displayName: "Order Status",
					hyperlink: false
				},
				{
					id: "customerCode",
					displayName: "Customer Code",
					hyperlink: false
				},
				{
					id: "customerName",
					displayName: "Customer Name",
					hyperlink: false
				},
				{
					id: "ckr",
					displayName: "CKR",
					hyperlink: false
				},
				{
					id: "svId",
					displayName: "SVID",
					hyperlink: false
				},
				{
					id: "ban",
					displayName: "BAN",
					hyperlink: false
				},
				{
					id: "acna",
					displayName: "ACNA",
					hyperlink: false
				},
				{
					id: "uverseBan",
					displayName: "U-Verse BAN",
					hyperlink: false
				},
				{
					id: "rtpIndicator",
					displayName: "RTP Indicator",
					hyperlink: false
				}
			]
		},
                rowValueList:[
                    {
                        cellValues: [
                            "7212",
                            null,
                            "ooo",
                            null,
                            "CNL",
                            "New",
                            "2009-12-08 16:04:15.367",
                            null,
                            "2009-12-31 00:00:00.0",
                            "InProgress",
                            null,
                            null,
                            null,
                            null,
                            null,
                            null,
                            null,
                            null
                        ]
                    }
                ]
            }
        };
        
        $rootScope.$digest();
        expect(scope.isLoading).toEqual(false);
        scope.poSearch();
        //expect(scope.isLoading).toEqual(true);
        //expect($rootScope.postObject.orderType).toEqual(data.)
    }));
    
//    it('should run clear method', inject(function($rootScope){
//        $rootScope.$digest();
//        
//        
//        
//        
//        expect(scope.poSearch.projectOrderId).toBeUndefined();
//        expect(scope.poSearch.orderType).toBeUndefined();
//        //scope.poSearch.orderType = scope.poOrderTypeList[0];
//        
//        scope.clear();
//        //scope.poOrderTypeList = ['UNI', 'EVC'];
//        expect(scope.poSearch.projectOrderId).toEqual('');
//        //expect(scope.poSearch.orderType).toEqual('UNI');
//    }));


});