angular.module('admin.app').controller('MobilityOrdersController', ['$scope', '$http', '$log', 'orderPicklists', 'OrderSearchService', 'TaskSearchService',
                                       function ($scope, $http, $log, orderPicklists, OrderSearchService, TaskSearchService, $timeout) {
	'use strict';
        
        var vm = this;

        init();
        
        function init() {
    
  	    initializeVMVariables();
 	    setupVMMethods();
            
        };
        
        function  initializeVMVariables() {

            vm.displayTable = false;
            vm.displaySearchDetails = false;
            
            // this object will be populated in 
            // orderPicklists => { poTypes, woTypes }
            vm.searchButtonDisabled = true;
            vm.clearButtonDisabled = true;
            
            vm.searchAccordionOpen = true;
            vm.orderPicklists = orderPicklists;
            vm.poType = orderPicklists.poTypes;
            vm.woType = orderPicklists.woTypes;

            vm.gridOptionsSearchResults = {};
            vm.gridOptionsTaskListTable = {};
            
            vm.isLoading = true;
            
            //Mobility Search DateTables setup
            vm.tableData = {
                loadTrigger: 0,
                tableDefinition:{}
            };
            
        };
        
        // help method to build ui-grid's columnDefs property based on meta data column attributes
        function extractColumnDefs(tableData) {
            
            var uniqueColumns = _.uniq(tableData.rowMetaData.columnList, 'id'),
                
            // map meta data column defs to the column defs ng-grid expects
            columnDefMap = {
                id: 'name',
                displayName: 'displayName'
            };

            var columnDefs = uniqueColumns.map(function (id) {
                var t = {};
                for (var key in columnDefMap) {
                    t[columnDefMap[key]] = id[key];
                };
                return t;
            });
            
            return columnDefs;
        };
        
                // help method to build ng-grid's data property based on meta data row values
        function extractTableCellValues(tableData) {
            
            var localRowData = [];
            var cellsInRow = [];
            
            var totalCols = tableData.rowMetaData.columnList.length;
            var totalRows = tableData.rowMetaData.rowValueList.length;
            
            for (var i=0; i < totalRows; i++) {
                
                cellsInRow = tableData.rowMetaData.rowValueList[i].cellValues;
                
                var obj = {};
                
                for (var j=0; j < totalCols; j++) {
                    obj[tableData.rowMetaData.columnList[j]['id']] = cellsInRow[j];
                }
                
                localRowData.push(obj);
            }

            return localRowData;
        };
        
        function setupVMMethods() {
            //NEW START
            //WORKS - must enable multiselect
            
            //http://plnkr.co/edit/PHeHVC6CGidJLNSC57ft?p=preview
            vm.deleteSelected = function(){
                //$log.log("selected: " + vm.gridApi.selection.getSelectedRows());
                //vm.gridOptionsTaskListTable.data.splice(0,1);
                console.log("trying to delete");
                
                angular.forEach(vm.gridApi.selection.getSelectedRows(), function (data, index) {
                    console.log(vm.gridApi.selection.getSelectedRows());
                    console.log("what is data");
                    console.log(data);
                    vm.gridOptionsTaskListTable.data.splice(vm.gridOptionsTaskListTable.data.lastIndexOf(data), 1);
                    //look inside of the grid data and returns the position(index) of the last occurence of this selected rows
                    //splice
                });
                console.log("deleted");
            };
            
            vm.swapSelected = function(){
                console.log("getting the selected rows");
                //angular.forEach(vm.gridApi.selection.getSelectedRows(), function (data, index) {
                    vm.selectedRows = vm.gridApi.selection.getSelectedRows();
                    console.log(vm.selectedRows);
                //});       
                //console.log("got it");
            };
            
            vm.moveSelectedUp = function(){
                /*OLD*/
                
                //angular.forEach(vm.gridApi.selection.getSelectedRows(), function (data, index) { //change this to single row
                    
                    //console.log("what is data");
                    //console.log(data);
                    vm.selectedIndex = vm.gridOptionsTaskListTable.data.lastIndexOf(vm.selectedRow);
                    console.log(vm.selectedIndex);
                    if(vm.selectedIndex !== 0){
                        vm.previousIndex = vm.selectedIndex - 1;
                        vm.nextIndex = vm.selectedIndex+1;
                    }
                    console.log("getting previous index");
                    console.log(vm.previousIndex);
                    console.log("getting previous data");
                    vm.previousRowData = vm.gridOptionsTaskListTable.data[vm.previousIndex];
                    console.log(vm.previousRowData);
                    
//                    console.log("swapping data");
//                    vm.gridOptionsTaskListTable.data[vm.selectedIndex] = vm.previousRowData;
//                    vm.gridOptionsTaskListTable.data[vm.previousIndex] = vm.selectedRow;
                    
                    console.log("getting next index");
                    console.log(vm.nextIndex);
                    console.log("getting next data");
                    vm.nextRowData = vm.gridOptionsTaskListTable.data[vm.nextIndex];
                    console.log(vm.nextRowData);
                    
                //});
                console.log("swapping data up");
                vm.gridOptionsTaskListTable.data[vm.selectedIndex] = vm.previousRowData;
                vm.gridOptionsTaskListTable.data[vm.previousIndex] = vm.selectedRow;
                
                /*NEW*/
                //angular.forEach(vm.gridApi.selection.getSelectedRows(), function (data, index) { //change this to single row
                    
                    //console.log("what is data");
                    //console.log(data);
                    //vm.selectedIndex = vm.gridOptionsTaskListTable.data.lastIndexOf(data);
                    //vm.selectedIndex = vm.vm.gridOptionsTaskListTable.data.lastIndexOf(vm.selectedRow);
                    //console.log(vm.selectedIndex);
                    
                    //Can only move it up if prevIndex is not -1
                    //if(vm.selectedIndex !== 0){
                    //if(vm.previousIndex > -1){
                        //vm.previousIndex = vm.selectedIndex - 1;
                        //vm.nextIndex = vm.selectedIndex+1;
                        
//                        console.log("getting previous index" + vm.previousIndex);
//                        console.log(vm.previousIndex);
//                        console.log("getting previous data");
//                        vm.previousRowData = vm.gridOptionsTaskListTable.data[vm.previousIndex];
//                        console.log(vm.previousRowData);

    //                    console.log("swapping data");
    //                    vm.gridOptionsTaskListTable.data[vm.selectedIndex] = vm.previousRowData;
    //                    vm.gridOptionsTaskListTable.data[vm.previousIndex] = vm.selectedRow;

//                        console.log("getting next index");
//                        console.log(vm.nextIndex);
//                        console.log("getting next data");
//                        vm.nextRowData = vm.gridOptionsTaskListTable.data[vm.nextIndex];
//                        console.log(vm.nextRowData);
                        
                        //vm.gridOptionsTaskListTable.data[vm.selectedIndex] = vm.previousRowData;
                        //vm.gridOptionsTaskListTable.data[vm.previousIndex] = vm.selectedRow;
//                        vm.selectedIndex = vm.selectedIndex -1;
//                        vm.previousIndex = vm.previousIndex + 1;
                        
                        //console.log("selectedIndex is: "+vm.selectedIndex);
                        //console.log("swapping data up");
                   // }
                    //else{
                        //Selecting the first element
                        //console.log("first element selected");
                        //vm.nextIndex = 0;
                        //vm.firstElement = true;
                        //console.log("swapping data disabled");
                   // }
                    
                    
               // });
                
                
            };
            
            vm.moveSelectedDown = function(){
                /*OLD*/
                //angular.forEach(vm.gridApi.selection.getSelectedRows(), function (data, index) { //change this to single row
                    
                    //console.log("what is data");
                    //console.log(data);
                    vm.selectedIndex = vm.gridOptionsTaskListTable.data.lastIndexOf(vm.selectedRow);
                    console.log(vm.selectedIndex);
                    if(vm.selectedIndex !== 0){
                        vm.previousIndex = vm.selectedIndex - 1;
                        vm.nextIndex = vm.selectedIndex+1;
                    }
                    else{
                        vm.nextIndex = vm.selectedIndex+1;
                    }
                    console.log("getting previous index");
                    console.log(vm.previousIndex);
                    console.log("getting previous data");
                    vm.previousRowData = vm.gridOptionsTaskListTable.data[vm.previousIndex];
                    console.log(vm.previousRowData);
                    
//                    console.log("swapping data");
//                    vm.gridOptionsTaskListTable.data[vm.selectedIndex] = vm.previousRowData;
//                    vm.gridOptionsTaskListTable.data[vm.previousIndex] = vm.selectedRow;
                    
                    console.log("getting next index");
                    console.log(vm.nextIndex);
                    console.log("getting next data");
                    vm.nextRowData = vm.gridOptionsTaskListTable.data[vm.nextIndex];
                    console.log(vm.nextRowData);
                    
                //});
                
                console.log("swapping data down");
                vm.gridOptionsTaskListTable.data[vm.selectedIndex] = vm.nextRowData;
                vm.gridOptionsTaskListTable.data[vm.nextIndex] = vm.selectedRow;
                
                /*NEW*/
//                //angular.forEach(vm.gridApi.selection.getSelectedRows(), function (data, index) { //change this to single row
//                    
//                    //console.log("what is data");
//                    //console.log(data);
//                    //vm.selectedIndex = vm.gridOptionsTaskListTable.data.lastIndexOf(data);
//                    //console.log(vm.selectedIndex);
//                    if(vm.nextIndex!== (vm.gridOptionsTaskListTable.data.length)){ //not the last element
//                        //vm.previousIndex = vm.selectedIndex - 1;
//                        //vm.nextIndex = vm.selectedIndex+1;
//                        
//                        //console.log("getting previous index");
//                        //console.log(vm.previousIndex);
//                        //console.log("getting previous data");
//                       // vm.previousRowData = vm.gridOptionsTaskListTable.data[vm.previousIndex];
//                        //console.log(vm.previousRowData);
//
//    //                    console.log("swapping data");
//    //                    vm.gridOptionsTaskListTable.data[vm.selectedIndex] = vm.previousRowData;
//    //                    vm.gridOptionsTaskListTable.data[vm.previousIndex] = vm.selectedRow;
//
//                        console.log("getting next index" + vm.nextIndex);
//                        console.log(vm.nextIndex);
//                        //console.log("getting next data");
//                        vm.nextRowData = vm.gridOptionsTaskListTable.data[vm.nextIndex];
//                        console.log(vm.nextRowData);
//                        
//                        console.log("swapping data down");
//                        vm.gridOptionsTaskListTable.data[vm.selectedIndex] = vm.nextRowData;
//                        vm.gridOptionsTaskListTable.data[vm.nextIndex] = vm.selectedRow;
//                        console.log("selectedIndex is: "+vm.selectedIndex);
//                        console.log("swapping data down");
//                    }
//                    else{ //last element
//                        console.log("last element reached");
//                        //vm.nextIndex = 0;
//                        //vm.lastElement = true;
//                        console.log("swapping data disabled");
//                    }
//                    
//                    
//                //});
//                
                
            };
            
            /*What are the cases
             * 
             * 1. Move down until nextIndex is the last element+1 - then can't allow it to move anymore - disable the button
             */
            
            
            //NOT working        
            vm.swapData = function(){
                TaskSearchService.swapTasks().then(function(data) {

                    var tableData = data.tableRows;  
                    processSearchResult(data);
                    vm.gridOptionsTaskListTable.data = extractTableCellValues(tableData);
                    vm.gridOptionsTaskListTable.columnDefs = extractColumnDefs(tableData);

                });
            }
            
            //NEW END
            
            vm.equipmentSearch = function () {
                     
                vm.displayTable = true;

                vm.orderSearchPromiseTable = OrderSearchService.getPOSearchResults('posearchresults').then(function(data) {

                    processSearchResult(data);
                    var tableData = data.tableRows;  
                    vm.gridOptionsSearchResults.data = extractTableCellValues(tableData);
                    vm.gridOptionsSearchResults.columnDefs = extractColumnDefs(tableData);

                    vm.displaySearchDetails = true;
                });
                
                TaskSearchService.getTasks().then(function(data) {

                    var tableData = data.tableRows;  

                    vm.gridOptionsTaskListTable.data = extractTableCellValues(tableData);
                    vm.gridOptionsTaskListTable.columnDefs = extractColumnDefs(tableData);

//                    $log.debug(angular.toJson(vm.gridOptionsTaskListTable.myColumnDefs));
//                    $log.debug(angular.toJson(vm.gridOptionsTaskListTable.myData));

                });
            };
            
            
            function processSearchResult(responseData) {

                vm.tableData.tableDefinition = responseData.tableRows;

                ++vm.tableData.loadTrigger;			//fires off table generation upon digest

            }
            // fetch data 
//            vm.refresh();
            
            $scope.$watch('mobilityorders.poType', function (val){

                if(val.name !== undefined || val === "") {
                    if(val.name !== "" && val.name !== undefined)  {
                        vm.searchButtonDisabled = false;
                        vm.clearButtonDisabled = false;
                    } else {
                        vm.searchButtonDisabled = true;
                        vm.clearButtonDisabled = true;
                    }
                }

            });
            
            $scope.$watch('mobilityorders.woType', function (val){

                if(val.name !== undefined || val === "") {
                    if(val.name !== "" && val.name !== undefined)  {
                        vm.searchButtonDisabled = false;
                        vm.clearButtonDisabled = false;
                    } else {
                        vm.searchButtonDisabled = true;
                        vm.clearButtonDisabled = true;
                    }
                }

            });
            
            vm.clear = function() {
                vm.poType = '';
                vm.woType = '';
            };
            
            vm.gridOptionsSearchResults = { 
                enableRowSelection: true,
                enableRowHeaderSelection: false,
                enableHorizontalScrollbar: 0,
                multiSelect: false
            };  
            
            vm.gridOptionsTaskListTable = { 
                enableRowSelection: true,
                enableRowHeaderSelection: false,
                enableHorizontalScrollbar: 0,
                multiSelect: false,
                showGridFooter:true,
                enableFooterTotalSelected:true
            };  
                
            vm.gridOptionsTaskListTable.onRegisterApi = function(gridApi){
                //set gridApi on scope
                vm.gridApi = gridApi;
                gridApi.selection.on.rowSelectionChanged($scope,function(row){
                  var msg = 'row selected ' + row.isSelected;
                  $log.log(msg);
                  vm.selectedRow = row.entity;
                  vm.selectedIndex = vm.gridOptionsTaskListTable.data.lastIndexOf(vm.selectedRow);
                  console.log("selected index: "+vm.selectedIndex);
                  vm.previousIndex = vm.selectedIndex - 1;
                  vm.nextIndex = vm.selectedIndex + 1;
                  if(vm.nextIndex === (vm.gridOptionsTaskListTable.data.length)){
                      console.log("last element selected");
                      vm.lastElement = true;
                      vm.firstElement=false;
                  }
                  else{
                      vm.lastElement = false;
                  }
                  
                  if(vm.previousIndex < 0){
                      console.log("first element selected");
                      vm.firstElement = true;
                      vm.lastElement = false;
                  }
                  else{
                      vm.firstElement=false;
                  }
                });

                gridApi.selection.on.rowSelectionChangedBatch($scope,function(rows){
                  var msg = 'rows changed ' + rows.length;
                  $log.log(msg);
                });
            };
        };
        
        /*
         * Approach 1: Reusing the up/down buttons to do swap
         * Step 1: Select two rows - enable multiselect
         * Step 2: Select up or down button to swap (and save)
         * Step 3: Repeat as many times ad necessary to move the row to desired position
         * Disadvantage: many swapping needed until getting to the desired position
         */
        
        /*
         * Approach 2: Reusing up/down button to move data up or down
         * Step 1: Select 1 row of data that user wants to move
         * Step 2: Select up gets the previous row data and does a swap (and save)
         * Step 3: Select down gets the next row data and does a swap
         * Step 4: Repeat as many times ad necessary to move the row to desired position
         */
          
   
}]);
