'use strict';
angular.module('admin.app').controller('LookupAdminController', ['$scope', '$log', '$filter', '$templateCache', 'uiGridExporterConstants', 'uiGridConstants', 'lookupTypes', 'AdminLookupService', 'ModalRowEdit',
    function ($scope, $log, $filter, $templateCache, uiGridExporterConstants, uiGridConstants, lookupTypes, AdminLookupService, ModalRowEdit) {
        $templateCache.put('ui-grid/selectionRowHeader',
            "<div class=\"ui-grid-disable-selection\"><div class=\"text-center\"><ui-grid-selection-row-header-buttons-canopi></ui-grid-selection-row-header-buttons-canopi></div></div>"
        );

        $templateCache.put('ui-grid/selectionRowHeaderButtonsCanopi',
            '<div style="padding-top: 5px; height: 30px;">' +
            '   <div ng-if="isEditing" class="btn-group">' +
            '       <a class="btn btn-xs btn-primary" ng-click="save()">Save</a>' +
            '       <a class="btn btn-xs btn-warning" ng-click="cancel(row, $event)">Cancel</a>' +
            '   </div>' +
            '   <div ng-if="!isEditing">' +
            '       <button style="padding: 0px;" class="btn-link" ng-class="{disabled: exclusive}" ng-disabled="exclusive" tooltip="Copy" ng-click="copy(row, $event)"><i class="fa fa-fw fa-clipboard"></i></button>' +
            '       <button style="padding: 0px;" class="btn-link" ng-class="{disabled: exclusive}" ng-disabled="exclusive" tooltip="Edit" ng-click="edit(row, $event)"><i class="fa fa-fw fa-pencil-square-o"></i></button>' +
            '   </div>' +
            '</div>'
        );

        var vm = this;

        // By default the accordion is open
        vm.searchAccordionOpen = true;

        // sort the lookup type values in ascending order
        vm.lookupTypes = $filter('orderBy')(lookupTypes, 'name');
        vm.uiGridExporterConstants = uiGridExporterConstants;

        // Load default values
        vm.lookupType = vm.lookupTypes[2];
        vm.mySlections = [];

        // Configure grid
        vm.gridOptions = {
            enableSelectAll: false,
            enableHorizontalScrollbar: uiGridConstants.NEVER,
            enableColumnMenus: false,
            enableGridMenu: true,
            multiSelect: false,
            exporterCsvFilename: vm.lookupType.value + '.csv',
            exporterMenuPdf: false,
            exporterMenuCsv: false,
            selectionRowHeaderWidth: '75',
            onRegisterApi: function (gridApi) {
                vm.gridApi = gridApi;
                // Register Events
                gridApi.selection.on.rowSelectionChanged($scope, rowSelectionChanged);
            }
        };

        AdminLookupService.getLookupType(vm.lookupType.value).then(function (data) {
            vm.data = extractTableCellValues(data.tableRows);
            vm.gridOptions.data = vm.data;
            vm.gridOptions.columnDefs = extractColumnDefs(data.tableRows);
        });

        // Handle grid events
        function rowSelectionChanged(row) {
            vm.selectedRow = row.isSelected ? row.entity : false;
        }

        vm.changeLookupType = function () {
            AdminLookupService.getLookupType(vm.lookupType.value).then(function (data) {
                vm.data = extractTableCellValues(data.tableRows);
                vm.gridOptions.data = vm.data;
                vm.gridOptions.columnDefs = extractColumnDefs(data.tableRows);
                vm.gridOptions.exporterCsvFilename = vm.lookupType.value + '.csv';
            });
        };

        /**
         * Add or Edit an item
         * @param {Object} item Optional item if this is an edit operation
         */
        vm.addItem = function (item) {
            ModalRowEdit.open(vm.gridOptions.columnDefs, item).then(function (newItem) {
                vm.gridOptions.data.push(newItem);
            });
        };

        vm.remove = function (item) {
            // Remove an item
        };

        vm.export = function () {
            vm.gridApi.exporter.csvExport(vm.uiGridExporterConstants.ALL, vm.uiGridExporterConstants.ALL);
        };

        /**
         * Workaround to filter on all columns
         * @todo Remove this when ui-grid provides it natively
         */
        vm.refreshData = function (filter) {
            vm.gridOptions.data = vm.data;
            while (filter) {
                var oSearchArray = filter.split(' ');
                vm.gridOptions.data = $filter('filter')(vm.gridOptions.data, oSearchArray[0], undefined);
                oSearchArray.shift();
                filter = (oSearchArray.length !== 0) ? oSearchArray.join(' ') : '';
            }
        };

        // help method to build ng-grid's columnDefs property based on meta data column attributes
        function extractColumnDefs(tableData) {
            var uniqueColumns = _.uniq(tableData.rowMetaData.columnList, 'id'),
            // map meta data column defs to the column defs ng-grid expects
                columnDefMap = {
                    id: 'field',
                    displayName: 'displayName'
                };

            var columnDefs = uniqueColumns.map(function (id) {
                var t = {};
                for (var key in columnDefMap) {
                    t[columnDefMap[key]] = id[key];
                }
                return t;
            });

            // Add cellTemplate
            _.forEach(columnDefs, function (def) {
                def.cellTemplate = "" +
                "   <div ng-if='COL_FIELD.length > 20' class='ui-grid-cell-contents' tooltip='{{COL_FIELD CUSTOM_FILTERS}}'>{{COL_FIELD CUSTOM_FILTERS}}</div>" +
                "   <div ng-if='COL_FIELD.length <= 20' class='ui-grid-cell-contents'>{{COL_FIELD CUSTOM_FILTERS}}</div>";
            });

            return columnDefs;
        }

        // help method to build ng-grid's data property based on meta data row values
        function extractTableCellValues(tableData) {

            var localRowData = [];
            var cellsInRow = [];

            var totalCols = tableData.rowMetaData.columnList.length;
            var totalRows = tableData.rowMetaData.rowValueList.length;

            for (var i = 0; i < totalRows; i++) {

                cellsInRow = tableData.rowMetaData.rowValueList[i].cellValues;

                var obj = {};

                for (var j = 0; j < totalCols; j++) {
                    obj[tableData.rowMetaData.columnList[j]['id']] = cellsInRow[j];
                }

                localRowData.push(obj);
            }

            return localRowData;
        }
    }]);